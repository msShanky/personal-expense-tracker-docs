USE expense_tracker;

/* DROP SCHEMAS */ 

DROP TABLE IF EXISTS Budget;
DROP TABLE IF EXISTS BudgetType;
DROP TABLE IF EXISTS Loan;
DROP TABLE IF EXISTS `Transaction`;
DROP TABLE IF EXISTS Category;
DROP TABLE IF EXISTS PaymentMethod;
DROP TABLE IF EXISTS SalaryVariable;
DROP TABLE IF EXISTS Budget;
DROP TABLE IF EXISTS Payslip;
DROP TABLE IF EXISTS RecurringTransaction;
DROP TABLE IF EXISTS Lending;
DROP TABLE IF EXISTS LendingTransaction;
DROP TABLE IF EXISTS Savings;
DROP TABLE IF EXISTS `User`;


CREATE TABLE User(
	Id INT NOT NULL AUTO_INCREMENT,
	Email VARCHAR(150) NOT NULL,
	`Password` VARCHAR(150) NOT NULL,
	FirstName VARCHAR(100) DEFAULT NULL,
	LastName VARCHAR(100) DEFAULT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (Id)
);

CREATE TABLE BudgetType(
	Id INT NOT NULL AUTO_INCREMENT,
	Name VARCHAR(100) DEFAULT NULL,
    UserId INT NOT NULL,
    CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_BudgetType_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
	PRIMARY KEY (Id)
);

CREATE TABLE Budget(
	Id INT NOT NULL AUTO_INCREMENT,
	TargetAmount DOUBLE(10,2) NOT NULL,
	BudgetTypeId INT(11) NOT NULL,
    UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	CONSTRAINT `FK_Budget_BudgetType` FOREIGN KEY (BudgetTypeId) REFERENCES BudgetType (Id),
	CONSTRAINT `FK_Budget_User` FOREIGN KEY (UserId) REFERENCES User(Id),
    PRIMARY KEY (Id)
);



CREATE TABLE Category(
	Id INT NOT NULL AUTO_INCREMENT,  
	`Name` VARCHAR(100) NOT NULL,
    UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_Category_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
	PRIMARY KEY (Id)
);

CREATE TABLE Loan(
	Id INT NOT NULL,
	StartDate INT(11) NOT NULL,
	Tenure INT(11) NOT NULL,
	BankName VARCHAR(100) DEFAULT NULL,
	Interest FLOAT DEFAULT NULL,
	Description VARCHAR(150) DEFAULT NULL,
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_Loan_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
	PRIMARY KEY (Id)
);

CREATE TABLE PaymentMethod(
	Id INT NOT NULL AUTO_INCREMENT,
	`Name` VARCHAR(50) NOT NULL,
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_PaymentMethod_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
	PRIMARY KEY (Id)
);

CREATE TABLE `Transaction`(
	Id INT NOT NULL AUTO_INCREMENT,
	Amount DECIMAL(10,0) NOT NULL,
	Description VARCHAR(150) DEFAULT NULL,
	`Date` DATETIME NOT NULL,
	PaymentMethodId INT(11) NOT NULL,
	CategoryId INT(11) NOT NULL,
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_Transaction_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),	
	CONSTRAINT `FK_Transaction_PaymentMethod` FOREIGN KEY (PaymentMethodId) REFERENCES PaymentMethod (Id),
	CONSTRAINT `FK_Transaction_Category` FOREIGN KEY (CategoryId) REFERENCES Category (Id),
    PRIMARY KEY (Id)
);

CREATE TABLE SalaryVariable(
	Id INT NOT NULL AUTO_INCREMENT,
	`Name` VARCHAR(150) NOT NULL,
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_SalaryVariable_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
    PRIMARY KEY (Id)
);

CREATE TABLE Payslip(
	Id INT NOT NULL AUTO_INCREMENT,
    SalaryVariablesId INT NOT NULL,
    `Date` DATETIME NOT NULL,
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_Payslip_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
    PRIMARY KEY (Id)    
);

CREATE TABLE RecurringTransaction(
	Id INT NOT NULL AUTO_INCREMENT,
    TransactionId INT NOT NULL,
    RECURRINGTYPE ENUM('weekly','fortnight','monthly', 'yearly'),
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_RecurringTransaction_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
	CONSTRAINT `FK_RecurringTransaction_Transaction` FOREIGN KEY (TransactionId)
    REFERENCES `Transaction` (Id),
    PRIMARY KEY (Id)
);

CREATE TABLE Lending(
	Id INT NOT NULL AUTO_INCREMENT,
	LendingAmount FLOAT NOT NULL,
    `DATE` DATETIME NOT NULL,
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_Lending_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
    PRIMARY KEY (Id)
);

CREATE TABLE LendingTransaction(
	Id INT NOT NULL AUTO_INCREMENT,
    LendingId INT NOT NULL,
    Amount FLOAT NOT NULL,
    `DATE` DATETIME NOT NULL,
    isCompleated BOOLEAN DEFAULT FALSE,
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_LendingTransaction_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
    CONSTRAINT `FK_LendingTransaction_Lending` FOREIGN KEY (LendingId)
    REFERENCES `Lending` (Id),
    PRIMARY KEY (Id)
);

CREATE TABLE Savings(
	Id INT NOT NULL AUTO_INCREMENT,
    Amount FLOAT NOT NULL,
    `Date` DATETIME,
	UserId INT NOT NULL,
	CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT `FK_Savings_User` FOREIGN KEY (UserId) REFERENCES `User`(Id),
    PRIMARY KEY(Id)
);
